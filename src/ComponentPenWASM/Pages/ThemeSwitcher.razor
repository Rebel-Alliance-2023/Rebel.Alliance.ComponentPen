@page "/themeswitcher"

@using ComponentPenWASM.Services
@using Microsoft.AspNetCore.Components.QuickGrid
@using ComponentPenWASM
@using System.Linq
@inject RebelThemeService ThemeService

<h3>Theme Switcher</h3>

<div class="controls">
    <div class="mode-toggle">
        <label>
            <input type="checkbox" @bind="isDarkMode" @bind:after="OnThemeModeChanged" />
            Dark Mode
        </label>
    </div>

    <div class="search-box">
        <input type="text" @bind-value="searchTerm" @bind-value:event="oninput" @onkeyup="FilterThemes" placeholder="Search themes..." />
    </div>
</div>

<QuickGrid Items="@filteredThemes" Pagination="@pagination" Class="theme-grid">
    <PropertyColumn Property="@(t => t.Id)" Title="ID" />
    <PropertyColumn Property="@(t => t.Title)" Title="Theme" />
    <TemplateColumn Title="Preview">
        <div class="theme-preview" style="@($"background: {(isDarkMode ? context.DarkModeGradient : context.LightModeGradient)}")"></div>
    </TemplateColumn>
    <TemplateColumn>
        <button class="btn btn-primary" @onclick="@(() => SelectTheme(context))">Select</button>
    </TemplateColumn>
</QuickGrid>

<Paginator State="@pagination" />

<div class="selected-theme">
    @if (selectedTheme != null)
    {
        <p>Selected Theme: @selectedTheme.Title (@(isDarkMode ? "Dark Mode" : "Light Mode"))</p>
    }
</div>

@code {
    private List<GradientTheme> allThemes = new List<GradientTheme>();
    private IQueryable<GradientTheme> filteredThemes = Enumerable.Empty<GradientTheme>().AsQueryable();
    private GradientTheme? selectedTheme;
    private bool isDarkMode = false;
    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private string searchTerm = "";

    [Parameter]
    public EventCallback<(GradientTheme, bool)> OnThemeChanged { get; set; }

    protected override void OnInitialized()
    {
        allThemes = GradientThemes.AllThemes;
        FilterThemes();
    }

    private void FilterThemes()
    {
        filteredThemes = allThemes
            .Where(t => t.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .AsQueryable();

        var totalItemCountProperty = typeof(PaginationState).GetProperty("TotalItemCount");
        if (totalItemCountProperty != null && totalItemCountProperty.CanWrite)
        {
            totalItemCountProperty.SetValue(pagination, filteredThemes.Count());
        }

        StateHasChanged();
    }

    private async Task SelectTheme(GradientTheme theme)
    {
        selectedTheme = theme;
        await NotifyThemeChanged();
    }

    private async Task OnThemeModeChanged()
    {
        if (selectedTheme != null)
        {
            await NotifyThemeChanged();
        }
    }

    private async Task NotifyThemeChanged()
    {
        if (selectedTheme != null)
        {
            ThemeService.SetTheme(selectedTheme, isDarkMode);
            await OnThemeChanged.InvokeAsync((selectedTheme, isDarkMode));
        }
    }
}


<style>
    /* Theme Switcher specific styles */
    .controls {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
    }

    .search-box input {
        padding: 5px;
        width: 200px;
    }

    .theme-grid {
        width: 100%;
        border-collapse: collapse;
    }

    .theme-grid th, .theme-grid td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
    }

    .theme-grid th {
        background-color: #f2f2f2;
    }

    .selected-theme {
        margin-top: 20px;
        font-weight: bold;
    }

    .mode-toggle {
        margin-bottom: 20px;
    }

    .theme-preview {
        width: 100px;
        height: 50px;
        border-radius: 4px;
    }
</style>