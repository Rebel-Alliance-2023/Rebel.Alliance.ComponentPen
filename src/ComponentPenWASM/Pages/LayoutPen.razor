@page "/layoutpen"
@using ComponentPenWASM.Services
@inject RebelThemeService ThemeService
@inject IJSRuntime JSRuntime

<div class="@(ThemeService.IsDarkMode ? "dark-mode" : "light-mode")">
    <h3 class="layout-pen-header">LayoutPen</h3>

    <div class="layout-pen-container">
        <div class="layout-controls">
            <select @bind="selectedLayout">
                @foreach (var layout_item in layouts)
                {
                    <option value="@layout_item">@layout_item</option>
                }
            </select>
            <button @onclick="ApplyLayout">Apply Layout</button>
        </div>

        <div class="layout-preview layout-container">
            @((MarkupString)currentLayoutHtml)
        </div>

        <div class="theme-switcher-container">
            <ThemeSwitcher OnThemeChanged="HandleThemeChanged" />
        </div>
    </div>
</div>


@code {
    private string selectedLayout = "Classic";
    private string currentLayoutHtml = "";
    private List<string> layouts = new List<string>
    {
        "Classic",
        "Full-Width Header",
        "Three-Column",
        "Grid",
        "Centered",
        "Hero Layout",
        "Magazine Layout",
        "Single Page Layout"
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadSavedTheme();
        ApplyLayout();
    }

    private void ApplyLayout()
    {
        currentLayoutHtml = GetLayoutHtml(selectedLayout);
        StateHasChanged();
    }


    private string GetLayoutHtml(string layout)
    {
        return layout switch
        {
            "Classic" => @"
                <header class='header'>Header</header>
                <div class='main-content'>
                    <aside class='sidebar sidebar-left'>Sidebar</aside>
                    <main class='content'>Main Content</main>
                </div>
                <footer class='footer'>Footer</footer>",

            "Full-Width Header" => @"
                <header class='header'>Header</header>
                <div class='main-content'>
                    <main class='content'>Main Content</main>
                    <aside class='sidebar sidebar-right'>Sidebar</aside>
                </div>
                <footer class='footer'>Footer</footer>",

            "Three-Column" => @"
                <header class='header'>Header</header>
                <div class='main-content three-column'>
                    <aside class='sidebar sidebar-left'>Left Sidebar</aside>
                    <main class='content'>Main Content</main>
                    <aside class='sidebar sidebar-right'>Right Sidebar</aside>
                </div>
                <footer class='footer'>Footer</footer>",

            "Grid" => @"
                <header class='header'>Header</header>
                <div class='grid-container'>
                    <div>Grid Item 1</div>
                    <div>Grid Item 2</div>
                    <div>Grid Item 3</div>
                    <div>Grid Item 4</div>
                </div>
                <footer class='footer'>Footer</footer>",

            "Centered" => @"
                <header class='header'>Header</header>
                <div class='main-content centered'>
                    <main class='content'>Centered Main Content</main>
                </div>
                <footer class='footer'>Footer</footer>",

            "Hero Layout" => @"
                <header class='header'>Header</header>
                <div class='hero'>
                    <h1>Hero Title</h1>
                    <p>Hero Subtitle or Call to Action</p>
                </div>
                <main class='content'>Main Content</main>
                <footer class='footer'>Footer</footer>",

            "Magazine Layout" => @"
                <header class='header'>Header</header>
                <div class='featured-content'>
                    <h2>Featured Content</h2>
                    <p>Large image or slider could go here</p>
                </div>
                <div class='article-grid'>
                    <article>Article 1</article>
                    <article>Article 2</article>
                    <article>Article 3</article>
                    <article>Article 4</article>
                    <article>Article 5</article>
                    <article>Article 6</article>
                </div>
                <footer class='footer'>Footer</footer>",

            "Single Page Layout" => @"
                <header class='header'>Header</header>
                <section class='full-screen-section'>
                    <h2>Section 1</h2>
                    <p>Full-screen content goes here</p>
                </section>
                <section class='full-screen-section'>
                    <h2>Section 2</h2>
                    <p>Full-screen content goes here</p>
                </section>
                <section class='full-screen-section'>
                    <h2>Section 3</h2>
                    <p>Full-screen content goes here</p>
                </section>
                <footer class='footer'>Footer</footer>",

            _ => "<p>Select a layout</p>"
        };
    }


    private async Task HandleThemeChanged((GradientTheme theme, bool isDarkMode) themeInfo)
    {
        ThemeService.SetTheme(themeInfo.theme, themeInfo.isDarkMode);
        await SaveThemePreference(themeInfo.theme.Id, themeInfo.isDarkMode);
        ApplyLayout();
        StateHasChanged();
    }

    private async Task SaveThemePreference(int themeId, bool isDarkMode)
    {
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "selectedThemeId", themeId);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "isDarkMode", isDarkMode);
    }

    private async Task LoadSavedTheme()
    {
        var savedThemeId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "selectedThemeId");
        var savedIsDarkMode = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "isDarkMode");

        if (!string.IsNullOrEmpty(savedThemeId) && int.TryParse(savedThemeId, out int themeId))
        {
            var theme = GradientThemes.AllThemes.FirstOrDefault(t => t.Id == themeId);
            if (theme != null)
            {
                bool isDarkMode = !string.IsNullOrEmpty(savedIsDarkMode) && bool.Parse(savedIsDarkMode);
                ThemeService.SetTheme(theme, isDarkMode);
            }
        }
    }

    private string GetLayoutPreviewStyle()
    {
        var theme = ThemeService.CurrentTheme;
        if (theme == null) return string.Empty;

        var colors = theme.Palette.Colors;
        string color1 = colors.ContainsKey("color1") ? colors["color1"] : "#000000";
        string color2 = colors.ContainsKey("color2") ? colors["color2"] : "#333333";
        string color4 = colors.ContainsKey("color4") ? colors["color4"] : "#CCCCCC";
        string color5 = colors.ContainsKey("color5") ? colors["color5"] : "#FFFFFF";

        string gradientColors = ThemeService.IsDarkMode ? $"{color1}, {color2}" : $"{color5}, {color4}";

        return $@"
            background-image: url(""data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100%25' height='100%25'%3E%3Cdefs%3E%3ClinearGradient id='gradient' x1='0%25' y1='0%25' x2='100%25' y2='100%25'%3E%3Cstop offset='0%25' stop-color='{gradientColors.Split(',')[0]}'/%3E%3Cstop offset='100%25' stop-color='{gradientColors.Split(',')[1]}'/%3E%3C/linearGradient%3E%3C/defs%3E%3Crect width='100%25' height='100%25' fill='url(%23gradient)'/%3E%3C/svg%3E"");
            background-repeat: no-repeat;
            background-size: cover;
        ";
    }
}


 <style>
    @((MarkupString)ThemeService.GenerateThemeCssVariables())

    .light-mode {
        --layout-pen-header-color: var(--theme-color1);
    }

    .dark-mode {
        --layout-pen-header-color: var(--theme-color5);
    }

    .layout-pen-header {
        color: var(--layout-pen-header-color);
        margin-bottom: 1rem;
    }

    .layout-pen-container {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        padding: 1rem;
        background-color: var(--theme-color5);
        color: var(--theme-color1);
    }

    .layout-controls {
        display: flex;
        gap: 1rem;
    }

    .layout-preview {
        border: 1px solid var(--theme-color3);
        padding: 1rem;
        min-height: 300px;
        transition: all 0.3s ease;
        @GetLayoutPreviewStyle()
    }

    .layout-preview .header {
        background-color: var(--theme-color2);
        color: var(--theme-color5);
        padding: 1rem;
        margin-bottom: 1rem;
    }

    .layout-preview .main-content {
        display: flex;
        min-height: 200px;
    }

    .layout-preview .main-content.three-column {
        flex-direction: row;
    }

    .layout-preview .sidebar {
        background-color: var(--theme-color3);
        color: var(--theme-color5);
        padding: 1rem;
        width: 200px;
        flex-shrink: 0;
    }

    .layout-preview .content {
        background-color: var(--theme-color5);
        color: var(--theme-color1);
        flex: 1;
        padding: 1rem;
    }

    .layout-preview .footer {
        background-color: var(--theme-color2);
        color: var(--theme-color5);
        padding: 1rem;
        margin-top: 1rem;
    }

    .layout-preview .grid-container {
        display: grid;
        gap: 1rem;
        grid-template-columns: repeat(2, 1fr);
    }

    .layout-preview .grid-container > div {
        background-color: var(--theme-color3);
        color: var(--theme-color5);
        padding: 1rem;
    }

    .layout-preview .hero {
        background-color: var(--theme-color2);
        color: var(--theme-color5);
        padding: 2rem;
        text-align: center;
        margin-bottom: 1rem;
    }

    .layout-preview .featured-content {
        background-color: var(--theme-color3);
        color: var(--theme-color5);
        padding: 2rem;
        margin-bottom: 1rem;
    }

    .layout-preview .article-grid {
        display: grid;
        gap: 1rem;
        grid-template-columns: repeat(3, 1fr);
    }

    .layout-preview .article-grid article {
        background-color: var(--theme-color5);
        color: var(--theme-color1);
        border: 1px solid var(--theme-color3);
        padding: 1rem;
    }

    .layout-preview .full-screen-section {
        background-color: var(--theme-color5);
        color: var(--theme-color1);
        border-bottom: 1px solid var(--theme-color3);
        padding: 2rem;
        min-height: 50vh;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        margin-bottom: 1rem;
    }

    .theme-switcher-container {
        margin-top: 1rem;
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .layout-preview .main-content,
        .layout-preview .main-content.three-column {
            flex-direction: column;
        }

        .layout-preview .sidebar {
            width: 100%;
            margin-bottom: 1rem;
        }

        .layout-preview .grid-container {
            grid-template-columns: 1fr;
        }

        .layout-preview .article-grid {
            grid-template-columns: 1fr;
        }
    }
</style>

